---
title: "Datasets and tips"
data: "../data_sources/*"
---

## Datasets

We have nine datasets for you to choose from. **We recommend saving your data inside your project**.

| Dataset | Description | Source |
| --- | --- | --- |
| [World populations](../data_sources/population.csv) | A summary of world populations and corresponding statistics | Data from a [Tidy Tuesday post on 2014 CIA World Factbook data](https://github.com/rfordatascience/tidytuesday/blob/main/data/2024/2024-10-22/readme.md)
| [Soccer players](../data_sources/Players2024.csv) | A summary of approx. 6000 soccer players from 2024 | Data from a [Kaggle submission](https://www.kaggle.com/datasets/asemmustafa/football-players-2024-dataset).
| [Coffee survey](../data_sources/coffee_survey.csv) | A survey of blind coffee tasting results | Data from a [Kaggle submission](https://www.kaggle.com/datasets/sujaykapadnis/lets-do-some-coffee-tasting)
| [Gapminder](../data_sources/gapminder.csv) | GDP and life expectancy data by country | Data from the [Research Bazaar's R novice tutorial](https://github.com/resbaz/r-novice-gapminder), sourced from [Gapminder](https://www.gapminder.org/).
| [Melbourne housing data](../data_sources/melb_data.csv) | A collection of houses for sale in Melbourne. | Data from a [Kaggle submission](https://www.kaggle.com/datasets/dansbecker/melbourne-housing-snapshot) | 
| [Goodreads books](../data_sources/books.csv) | A summary of books on Goodreads. | Data from a [Kaggle submission](https://www.kaggle.com/datasets/jealousleopard/goodreadsbooks)
| [Queensland hospitals](../data_sources/hospital_data.csv) | Queensland emergency department statistics. | Data from the Queensland Government's [Open Data Portal](https://www.data.qld.gov.au/dataset/emergency-departments-quarterly-data). |
| [Queensland fuel prices](../data_sources/qld_fuel.csv) | Fuel prices by the pump in Queensland | Data from the Queensland Government's [Open Data Portal](https://www.data.qld.gov.au/dataset/fuel-price-reporting-2024)
| [Aeroplane bird strikes](../data_sources/birds_strikes.csv) | Aeroplane bird strike incidents fron the 90s| Data from a [Tidy Tuesday post](https://github.com/rfordatascience/tidytuesday/tree/2500765853ea5235409d936cf9bbbf7d5f8b6881/data/2019/2019-07-23) sourced from an [FAA database](https://wildlife.faa.gov/home)

## Tips

Here's a few general tips. In addition, we strongly recommend using [popular cheatsheets](https://rstudio.github.io/cheatsheets/), which give a quick and easy reference for common packages and functions, and [from Data to Viz](https://www.data-to-viz.com/), which guides you through choosing a visualisation.

### Hotkeys
| Code | Hotkey | Description |
| --- | --- | --- |
|  | <kbd>F9</kbd> (or <kbd>Fn</kbd> + <kbd>F9</kbd>) | Run current line |
| `# %%` | <kbd>Ctrl</kbd> + <kbd>2</kbd> | New cell (only in Spyder) |
|  | <kbd>Ctrl</kbd>+<kbd>Enter</kbd> | Run current cell (when in Script) |
|  | <kbd>Ctrl</kbd>+<kbd>C</kbd> | Cancel current operation (when in Console) |
  
### Data manipulation

Use the `pandas` package to analyse your data:

```python
import pandas as pd
```

#### Importing and exporting data
In case you've forgotten, use the `read.csv()` function to import data:

```python
df = pd.read_csv("data/dataset.csv")
```

If you'd like to export any files from Python to ".csv", use the `.to_csv()` method

```python
df.to_csv("data/output_name.csv")
```

#### Initial exploration
You'll want to explore the data to start with - below are a few functions to get started.

| Function | Example | Description |
| --- | --- | --- |
| `df.columns` | | Returns the variable names | 
| `df.info()` | | Returns the structure of the dataset (variable names, counts and types) | 
| `df["variable"]` | | Returns a specific column |
| `pd.unique("variable")` | | Returns the unique values of a variable |
| `df.describe()` or `df["variable"].describe()` | Returns a statistical summary of the dataset or a variable |

#### Removing `nan`s

We can remove `nan`s by filtering with the condition `df["variable"].notna()`:

```python
df = df[df["variable"].notna()]
```

#### Time series data
If you've picked a dataset with time-series data (e.g. a "date" variable), you should transform that variable so that it visualises better:

```python
df["variable"] = pd.to_datetime(df["variable"])
```

#### Categorical and ordered data
If you're dealing with categorical data, it can be helpful to tell Python

```python
df["variable"] = df["variable"].astype("category")
```

To manually specify the order of categories, use the `df["variable"].cat.reorder_categories()` function and use the `ordered = True` parameter

```python
df["variable"] = df["variable"].cat.reorder_categories(["cat1", "cat2", ...], ordered = True)
```

> This is particularly useful for the **Coffee survey** dataset.

If you're dealing with categorical data, look at the [pandas guide](https://pandas.pydata.org/docs/user_guide/categorical.html) for inspiration and help.

#### Renaming variables
Some datasets have cumbersome names for their variables. We can change variable names with `df.rename()`, sending a *dictionary* to the `columns = ` parameter:

```python
df = df.rename(columns = {"old_name": "new_name"})
```

This is particularly useful for the **World population** dataset.

> A *dictionary* is a Python variable with key-value pairs. The structure is `key: value`, so above we have a dictionary with one key, `"old_name"` and corresponding value `"new_name"`. They are created as follows:
> ```python
> example_dictionary = {"key1": "value1",
>                       "key2": "value2",
>                       "key3": "value3",
>                       ...}
> ```
> > Note that multiple lines are used purely for readability, you could just as well do this on one line.

### Visualisation
You can make simple visualisations with `seaborn`'s `relplot()`, `catplot()` and `displot()` functions

```python
import seaborn as sns

sns.relplot(data = df, x = "variable_x", y = "variable_y", hue = "variable_colour", ...)
```

We can add plot elements easily with `matplotlib.pyplot`
```python
import seaborn as sns
import matplotlib.pyplot as plt

sns.relplot(data = df, x = "variable_x", y = "variable_y", hue = "variable_colour", ...)
plt.xlabel("x axis label")
plt.ylabel("y axis label")
```
